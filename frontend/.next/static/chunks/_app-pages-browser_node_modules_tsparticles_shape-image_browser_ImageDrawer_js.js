"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_tsparticles_shape-image_browser_ImageDrawer_js"],{

/***/ "(app-pages-browser)/./node_modules/@tsparticles/shape-image/browser/ImageDrawer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@tsparticles/shape-image/browser/ImageDrawer.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageDrawer: function() { return /* binding */ ImageDrawer; }\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"(app-pages-browser)/./node_modules/@tsparticles/engine/browser/index.js\");\n\nconst double = 2, defaultAlpha = 1, sides = 12, defaultRatio = 1;\nclass ImageDrawer {\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    async draw(data) {\n        const { context, radius, particle, opacity } = data, image = particle.image, element = image === null || image === void 0 ? void 0 : image.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            const { drawGif } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_tsparticles_shape-image_browser_GifUtils_Utils_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./GifUtils/Utils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/shape-image/browser/GifUtils/Utils.js\"));\n            drawGif(data);\n        } else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius\n            }, diameter = radius * double;\n            context.drawImage(element, pos.x, pos.y, diameter, diameter / ratio);\n        }\n        context.globalAlpha = defaultAlpha;\n    }\n    getSidesCount() {\n        return sides;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload){\n            await this._engine.loadImage(imageData);\n        }\n    }\n    async loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const image = this._engine.images.find((t)=>t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            await this.loadImageShape(imageData);\n            await this.loadShape(particle);\n        }\n    }\n    async particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const color = particle.getFillColor(), image = images.find((t)=>t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        var _imageData_replaceColor;\n        const replaceColor = (_imageData_replaceColor = imageData.replaceColor) !== null && _imageData_replaceColor !== void 0 ? _imageData_replaceColor : image.replaceColor;\n        if (image.loading) {\n            setTimeout(()=>{\n                void this.particleInit(container, particle);\n            });\n            return;\n        }\n        let imageRes;\n        if (image.svgData && color) {\n            const { replaceImageColor } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./Utils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/shape-image/browser/Utils.js\"));\n            imageRes = await replaceImageColor(image, imageData, color, particle);\n        } else {\n            var _image_ratio;\n            imageRes = {\n                color,\n                data: image,\n                element: image.element,\n                gif: image.gif,\n                gifData: image.gifData,\n                gifLoopCount: image.gifLoopCount,\n                loaded: true,\n                ratio: imageData.width && imageData.height ? imageData.width / imageData.height : (_image_ratio = image.ratio) !== null && _image_ratio !== void 0 ? _image_ratio : defaultRatio,\n                replaceColor: replaceColor,\n                source: imageData.src\n            };\n        }\n        if (!imageRes.ratio) {\n            imageRes.ratio = 1;\n        }\n        var _imageData_fill, _imageData_close;\n        const fill = (_imageData_fill = imageData.fill) !== null && _imageData_fill !== void 0 ? _imageData_fill : particle.shapeFill, close = (_imageData_close = imageData.close) !== null && _imageData_close !== void 0 ? _imageData_close : particle.shapeClose, imageShape = {\n            image: imageRes,\n            fill,\n            close\n        };\n        particle.image = imageShape.image;\n        particle.shapeFill = imageShape.fill;\n        particle.shapeClose = imageShape.close;\n    }\n    constructor(engine){\n        this.loadImageShape = async (imageShape)=>{\n            if (!this._engine.loadImage) {\n                throw new Error(\"\".concat(_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.errorPrefix, \" image shape not initialized\"));\n            }\n            var _imageShape_replaceColor;\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: (_imageShape_replaceColor = imageShape.replaceColor) !== null && _imageShape_replaceColor !== void 0 ? _imageShape_replaceColor : false,\n                src: imageShape.src\n            });\n        };\n        this._engine = engine;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdHNwYXJ0aWNsZXMvc2hhcGUtaW1hZ2UvYnJvd3Nlci9JbWFnZURyYXdlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRDtBQUNsRCxNQUFNQyxTQUFTLEdBQUdDLGVBQWUsR0FBR0MsUUFBUSxJQUFJQyxlQUFlO0FBQ3hELE1BQU1DO0lBZVRDLFNBQVNDLEtBQUssRUFBRTtRQUNaLElBQUksQ0FBQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsTUFBTSxFQUFFO1lBQ3RCLElBQUksQ0FBQ0QsT0FBTyxDQUFDQyxNQUFNLEdBQUcsRUFBRTtRQUM1QjtRQUNBLElBQUksQ0FBQ0QsT0FBTyxDQUFDQyxNQUFNLENBQUNDLElBQUksQ0FBQ0g7SUFDN0I7SUFDQSxNQUFNSSxLQUFLQyxJQUFJLEVBQUU7UUFDYixNQUFNLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sRUFBRSxHQUFHSixNQUFNTCxRQUFRUSxTQUFTUixLQUFLLEVBQUVVLFVBQVVWLGtCQUFBQSw0QkFBQUEsTUFBT1UsT0FBTztRQUNyRyxJQUFJLENBQUNWLE9BQU87WUFDUjtRQUNKO1FBQ0FNLFFBQVFLLFdBQVcsR0FBR0Y7UUFDdEIsSUFBSVQsTUFBTVksR0FBRyxJQUFJWixNQUFNYSxPQUFPLEVBQUU7WUFDNUIsTUFBTSxFQUFFQyxPQUFPLEVBQUUsR0FBRyxNQUFNLGtTQUE2QjtZQUN2REEsUUFBUVQ7UUFDWixPQUNLLElBQUlLLFNBQVM7WUFDZCxNQUFNSyxRQUFRZixNQUFNZSxLQUFLLEVBQUVDLE1BQU07Z0JBQzdCQyxHQUFHLENBQUNWO2dCQUNKVyxHQUFHLENBQUNYO1lBQ1IsR0FBR1ksV0FBV1osU0FBU2I7WUFDdkJZLFFBQVFjLFNBQVMsQ0FBQ1YsU0FBU00sSUFBSUMsQ0FBQyxFQUFFRCxJQUFJRSxDQUFDLEVBQUVDLFVBQVVBLFdBQVdKO1FBQ2xFO1FBQ0FULFFBQVFLLFdBQVcsR0FBR2hCO0lB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QUE4R0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B0c3BhcnRpY2xlcy9zaGFwZS1pbWFnZS9icm93c2VyL0ltYWdlRHJhd2VyLmpzPzM0OTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXJyb3JQcmVmaXggfSBmcm9tIFwiQHRzcGFydGljbGVzL2VuZ2luZVwiO1xuY29uc3QgZG91YmxlID0gMiwgZGVmYXVsdEFscGhhID0gMSwgc2lkZXMgPSAxMiwgZGVmYXVsdFJhdGlvID0gMTtcbmV4cG9ydCBjbGFzcyBJbWFnZURyYXdlciB7XG4gICAgY29uc3RydWN0b3IoZW5naW5lKSB7XG4gICAgICAgIHRoaXMubG9hZEltYWdlU2hhcGUgPSBhc3luYyAoaW1hZ2VTaGFwZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9lbmdpbmUubG9hZEltYWdlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2Vycm9yUHJlZml4fSBpbWFnZSBzaGFwZSBub3QgaW5pdGlhbGl6ZWRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2VuZ2luZS5sb2FkSW1hZ2Uoe1xuICAgICAgICAgICAgICAgIGdpZjogaW1hZ2VTaGFwZS5naWYsXG4gICAgICAgICAgICAgICAgbmFtZTogaW1hZ2VTaGFwZS5uYW1lLFxuICAgICAgICAgICAgICAgIHJlcGxhY2VDb2xvcjogaW1hZ2VTaGFwZS5yZXBsYWNlQ29sb3IgPz8gZmFsc2UsXG4gICAgICAgICAgICAgICAgc3JjOiBpbWFnZVNoYXBlLnNyYyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9lbmdpbmUgPSBlbmdpbmU7XG4gICAgfVxuICAgIGFkZEltYWdlKGltYWdlKSB7XG4gICAgICAgIGlmICghdGhpcy5fZW5naW5lLmltYWdlcykge1xuICAgICAgICAgICAgdGhpcy5fZW5naW5lLmltYWdlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2VuZ2luZS5pbWFnZXMucHVzaChpbWFnZSk7XG4gICAgfVxuICAgIGFzeW5jIGRyYXcoZGF0YSkge1xuICAgICAgICBjb25zdCB7IGNvbnRleHQsIHJhZGl1cywgcGFydGljbGUsIG9wYWNpdHkgfSA9IGRhdGEsIGltYWdlID0gcGFydGljbGUuaW1hZ2UsIGVsZW1lbnQgPSBpbWFnZT8uZWxlbWVudDtcbiAgICAgICAgaWYgKCFpbWFnZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvcGFjaXR5O1xuICAgICAgICBpZiAoaW1hZ2UuZ2lmICYmIGltYWdlLmdpZkRhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZHJhd0dpZiB9ID0gYXdhaXQgaW1wb3J0KFwiLi9HaWZVdGlscy9VdGlscy5qc1wiKTtcbiAgICAgICAgICAgIGRyYXdHaWYoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgcmF0aW8gPSBpbWFnZS5yYXRpbywgcG9zID0ge1xuICAgICAgICAgICAgICAgIHg6IC1yYWRpdXMsXG4gICAgICAgICAgICAgICAgeTogLXJhZGl1cyxcbiAgICAgICAgICAgIH0sIGRpYW1ldGVyID0gcmFkaXVzICogZG91YmxlO1xuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoZWxlbWVudCwgcG9zLngsIHBvcy55LCBkaWFtZXRlciwgZGlhbWV0ZXIgLyByYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5nbG9iYWxBbHBoYSA9IGRlZmF1bHRBbHBoYTtcbiAgICB9XG4gICAgZ2V0U2lkZXNDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHNpZGVzO1xuICAgIH1cbiAgICBhc3luYyBpbml0KGNvbnRhaW5lcikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gY29udGFpbmVyLmFjdHVhbE9wdGlvbnM7XG4gICAgICAgIGlmICghb3B0aW9ucy5wcmVsb2FkIHx8ICF0aGlzLl9lbmdpbmUubG9hZEltYWdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBpbWFnZURhdGEgb2Ygb3B0aW9ucy5wcmVsb2FkKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9lbmdpbmUubG9hZEltYWdlKGltYWdlRGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgbG9hZFNoYXBlKHBhcnRpY2xlKSB7XG4gICAgICAgIGlmIChwYXJ0aWNsZS5zaGFwZSAhPT0gXCJpbWFnZVwiICYmIHBhcnRpY2xlLnNoYXBlICE9PSBcImltYWdlc1wiKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9lbmdpbmUuaW1hZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmdpbmUuaW1hZ2VzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW1hZ2VEYXRhID0gcGFydGljbGUuc2hhcGVEYXRhO1xuICAgICAgICBpZiAoIWltYWdlRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGltYWdlID0gdGhpcy5fZW5naW5lLmltYWdlcy5maW5kKCh0KSA9PiB0Lm5hbWUgPT09IGltYWdlRGF0YS5uYW1lIHx8IHQuc291cmNlID09PSBpbWFnZURhdGEuc3JjKTtcbiAgICAgICAgaWYgKCFpbWFnZSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkSW1hZ2VTaGFwZShpbWFnZURhdGEpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkU2hhcGUocGFydGljbGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHBhcnRpY2xlSW5pdChjb250YWluZXIsIHBhcnRpY2xlKSB7XG4gICAgICAgIGlmIChwYXJ0aWNsZS5zaGFwZSAhPT0gXCJpbWFnZVwiICYmIHBhcnRpY2xlLnNoYXBlICE9PSBcImltYWdlc1wiKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9lbmdpbmUuaW1hZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLl9lbmdpbmUuaW1hZ2VzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW1hZ2VzID0gdGhpcy5fZW5naW5lLmltYWdlcywgaW1hZ2VEYXRhID0gcGFydGljbGUuc2hhcGVEYXRhO1xuICAgICAgICBpZiAoIWltYWdlRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbG9yID0gcGFydGljbGUuZ2V0RmlsbENvbG9yKCksIGltYWdlID0gaW1hZ2VzLmZpbmQoKHQpID0+IHQubmFtZSA9PT0gaW1hZ2VEYXRhLm5hbWUgfHwgdC5zb3VyY2UgPT09IGltYWdlRGF0YS5zcmMpO1xuICAgICAgICBpZiAoIWltYWdlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVwbGFjZUNvbG9yID0gaW1hZ2VEYXRhLnJlcGxhY2VDb2xvciA/PyBpbWFnZS5yZXBsYWNlQ29sb3I7XG4gICAgICAgIGlmIChpbWFnZS5sb2FkaW5nKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB2b2lkIHRoaXMucGFydGljbGVJbml0KGNvbnRhaW5lciwgcGFydGljbGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGltYWdlUmVzO1xuICAgICAgICBpZiAoaW1hZ2Uuc3ZnRGF0YSAmJiBjb2xvcikge1xuICAgICAgICAgICAgY29uc3QgeyByZXBsYWNlSW1hZ2VDb2xvciB9ID0gYXdhaXQgaW1wb3J0KFwiLi9VdGlscy5qc1wiKTtcbiAgICAgICAgICAgIGltYWdlUmVzID0gYXdhaXQgcmVwbGFjZUltYWdlQ29sb3IoaW1hZ2UsIGltYWdlRGF0YSwgY29sb3IsIHBhcnRpY2xlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGltYWdlUmVzID0ge1xuICAgICAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgICAgIGRhdGE6IGltYWdlLFxuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGltYWdlLmVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZ2lmOiBpbWFnZS5naWYsXG4gICAgICAgICAgICAgICAgZ2lmRGF0YTogaW1hZ2UuZ2lmRGF0YSxcbiAgICAgICAgICAgICAgICBnaWZMb29wQ291bnQ6IGltYWdlLmdpZkxvb3BDb3VudCxcbiAgICAgICAgICAgICAgICBsb2FkZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcmF0aW86IGltYWdlRGF0YS53aWR0aCAmJiBpbWFnZURhdGEuaGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgID8gaW1hZ2VEYXRhLndpZHRoIC8gaW1hZ2VEYXRhLmhlaWdodFxuICAgICAgICAgICAgICAgICAgICA6IGltYWdlLnJhdGlvID8/IGRlZmF1bHRSYXRpbyxcbiAgICAgICAgICAgICAgICByZXBsYWNlQ29sb3I6IHJlcGxhY2VDb2xvcixcbiAgICAgICAgICAgICAgICBzb3VyY2U6IGltYWdlRGF0YS5zcmMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaW1hZ2VSZXMucmF0aW8pIHtcbiAgICAgICAgICAgIGltYWdlUmVzLnJhdGlvID0gMTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWxsID0gaW1hZ2VEYXRhLmZpbGwgPz8gcGFydGljbGUuc2hhcGVGaWxsLCBjbG9zZSA9IGltYWdlRGF0YS5jbG9zZSA/PyBwYXJ0aWNsZS5zaGFwZUNsb3NlLCBpbWFnZVNoYXBlID0ge1xuICAgICAgICAgICAgaW1hZ2U6IGltYWdlUmVzLFxuICAgICAgICAgICAgZmlsbCxcbiAgICAgICAgICAgIGNsb3NlLFxuICAgICAgICB9O1xuICAgICAgICBwYXJ0aWNsZS5pbWFnZSA9IGltYWdlU2hhcGUuaW1hZ2U7XG4gICAgICAgIHBhcnRpY2xlLnNoYXBlRmlsbCA9IGltYWdlU2hhcGUuZmlsbDtcbiAgICAgICAgcGFydGljbGUuc2hhcGVDbG9zZSA9IGltYWdlU2hhcGUuY2xvc2U7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImVycm9yUHJlZml4IiwiZG91YmxlIiwiZGVmYXVsdEFscGhhIiwic2lkZXMiLCJkZWZhdWx0UmF0aW8iLCJJbWFnZURyYXdlciIsImFkZEltYWdlIiwiaW1hZ2UiLCJfZW5naW5lIiwiaW1hZ2VzIiwicHVzaCIsImRyYXciLCJkYXRhIiwiY29udGV4dCIsInJhZGl1cyIsInBhcnRpY2xlIiwib3BhY2l0eSIsImVsZW1lbnQiLCJnbG9iYWxBbHBoYSIsImdpZiIsImdpZkRhdGEiLCJkcmF3R2lmIiwicmF0aW8iLCJwb3MiLCJ4IiwieSIsImRpYW1ldGVyIiwiZHJhd0ltYWdlIiwiZ2V0U2lkZXNDb3VudCIsImluaXQiLCJjb250YWluZXIiLCJvcHRpb25zIiwiYWN0dWFsT3B0aW9ucyIsInByZWxvYWQiLCJsb2FkSW1hZ2UiLCJpbWFnZURhdGEiLCJsb2FkU2hhcGUiLCJzaGFwZSIsInNoYXBlRGF0YSIsImZpbmQiLCJ0IiwibmFtZSIsInNvdXJjZSIsInNyYyIsImxvYWRJbWFnZVNoYXBlIiwicGFydGljbGVJbml0IiwiY29sb3IiLCJnZXRGaWxsQ29sb3IiLCJyZXBsYWNlQ29sb3IiLCJsb2FkaW5nIiwic2V0VGltZW91dCIsImltYWdlUmVzIiwic3ZnRGF0YSIsInJlcGxhY2VJbWFnZUNvbG9yIiwiZ2lmTG9vcENvdW50IiwibG9hZGVkIiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsIiwic2hhcGVGaWxsIiwiY2xvc2UiLCJzaGFwZUNsb3NlIiwiaW1hZ2VTaGFwZSIsImNvbnN0cnVjdG9yIiwiZW5naW5lIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tsparticles/shape-image/browser/ImageDrawer.js\n"));

/***/ })

}]);