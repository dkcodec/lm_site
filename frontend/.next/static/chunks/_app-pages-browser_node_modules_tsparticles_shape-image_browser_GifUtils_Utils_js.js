"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_tsparticles_shape-image_browser_GifUtils_Utils_js"],{

/***/ "(app-pages-browser)/./node_modules/@tsparticles/shape-image/browser/GifUtils/ByteStream.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@tsparticles/shape-image/browser/GifUtils/ByteStream.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ByteStream: function() { return /* binding */ ByteStream; }\n/* harmony export */ });\nclass ByteStream {\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr)=>acc + String.fromCharCode(curr), \"\");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        const increment = 2, previous = 1, shift = 8;\n        this.pos += increment;\n        return this.data[this.pos - increment] + (this.data[this.pos - previous] << shift);\n    }\n    readSubBlocks() {\n        let blockString = \"\", size = 0;\n        const minCount = 0, emptySize = 0;\n        do {\n            size = this.data[this.pos++];\n            for(let count = size; --count >= minCount; blockString += String.fromCharCode(this.data[this.pos++])){}\n        }while (size !== emptySize);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = this.data[this.pos], len = 0;\n        const emptySize = 0, increment = 1;\n        for(let offset = 0; size !== emptySize; offset += size + increment, size = this.data[this.pos + offset]){\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        size = this.data[this.pos++];\n        for(let i = 0; size !== emptySize; size = this.data[this.pos++]){\n            for(let count = size; --count >= emptySize; blockData[i++] = this.data[this.pos++]){}\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for(const increment = 1, noData = 0; this.data[this.pos] !== noData; this.pos += this.data[this.pos] + increment){}\n        this.pos++;\n    }\n    constructor(bytes){\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdHNwYXJ0aWNsZXMvc2hhcGUtaW1hZ2UvYnJvd3Nlci9HaWZVdGlscy9CeXRlU3RyZWFtLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQTtJQUtUQyxVQUFVQyxLQUFLLEVBQUU7UUFDYixNQUFNQyxRQUFRLElBQUksQ0FBQ0MsSUFBSSxDQUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDRSxHQUFHLEVBQUUsSUFBSSxDQUFDQSxHQUFHLEdBQUdIO1FBQ25ELElBQUksQ0FBQ0csR0FBRyxJQUFJRixNQUFNRyxNQUFNO1FBQ3hCLE9BQU9ILE1BQU1JLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQyxPQUFTRCxNQUFNRSxPQUFPQyxZQUFZLENBQUNGLE9BQU87SUFDeEU7SUFDQUcsV0FBVztRQUNQLE9BQU8sSUFBSSxDQUFDUixJQUFJLENBQUMsSUFBSSxDQUFDQyxHQUFHLEdBQUc7SUFDaEM7SUFDQVEsZUFBZTtRQUNYLE1BQU1DLFlBQVksR0FBR0MsV0FBVyxHQUFHQyxRQUFRO1FBQzNDLElBQUksQ0FBQ1gsR0FBRyxJQUFJUztRQUNaLE9BQU8sSUFBSSxDQUFDVixJQUFJLENBQUMsSUFBSSxDQUFDQyxHQUFHLEdBQUdTLFVBQVUsR0FBSSxLQUFJLENBQUNWLElBQUksQ0FBQyxJQUFJLENBQUNDLEdBQUcsR0FBR1UsU0FBUyxJQUFJQyxLQUFJO0lBQ3BGO0lBQ0FDLGdCQUFnQjtRQUNaLElBQUlDLGNBQWMsSUFBSUMsT0FBTztRQUM3QixNQUFNQyxXQUFXLEdBQUdDLFlBQVk7UUFDaEMsR0FBRztZQUNDRixPQUFPLElBQUksQ0FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQ0MsR0FBRyxHQUFHO1lBQzVCLElBQUssSUFBSUgsUUFBUWlCLE1BQU0sRUFBRWpCLFNBQVNrQixVQUFVRixlQUFlUixPQUFPQyxZQUFZLENBQUMsSUFBSSxDQUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDQyxHQUFHLEdBQUcsRUFBRyxDQUN2RztRQUNKLFFBQVNjLFNBQVNFLFdBQVc7UUFDN0IsT0FBT0g7SUFDWDtJQUNBSSxtQkFBbUI7UUFDZixJQUFJSCxPQUFPLElBQUksQ0FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQ0MsR0FBRyxDQUFDLEVBQUVrQixNQUFNO1FBQ3RDLE1BQU1GLFlBQVksR0FBR1AsWUFBWTtRQUNqQyxJQUFLLElBQUlVLFNBQVMsR0FBR0wsU0FBU0UsV0FBV0csVUFBVUwsT0FBT0wsV0FBV0ssT0FBTyxJQUFJLENBQUNmLElBQUksQ0FBQyxJQUFJLENBQUNDLEdBQUcsR0FBR21CLE9BQU8sQ0FBRTtZQUN0R0QsT0FBT0o7UUFDWDtRQUNBLE1BQU1NLFlBQVksSUFBSUMsV0FBV0g7UUFDakNKLE9BQU8sSUFBSSxDQUFDZixJQUFJLENBQUMsSUFBSSxDQUFDQyxHQUFHLEdBQUc7UUFDNUIsSUFBSyxJQUFJc0IsSUFBSSxHQUFHUixTQUFTRSxXQUFXRixPQUFPLElBQUksQ0FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQ0MsR0FBRyxHQUFHLENBQUU7WUFDOUQsSUFBSyxJQUFJSCxRQUFRaUIsTUFBTSxFQUFFakIsU0FBU21CLFdBQVdJLFNBQVMsQ0FBQ0UsSUFBSSxHQUFHLElBQUksQ0FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUNDLEdBQUcsR0FBRyxDQUFFLENBQ3JGO1FBQ0o7UUFDQSxPQUFPb0I7SUFDWDtJQUNBRyxnQkFBZ0I7UUFDWixJQUFLLE1BQU1kLFlBQVksR0FBR2UsU0FBUyxHQUFHLElBQUksQ0FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxLQUFLd0IsUUFBUSxJQUFJLENBQUN4QixHQUFHLElBQUksSUFBSSxDQUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDQyxHQUFHLENBQUMsR0FBR1MsVUFBVyxDQUNuSDtRQUNBLElBQUksQ0FBQ1QsR0FBRztJQUNaO0lBN0NBeUIsWUFBWUMsS0FBSyxDQUFFO1FBQ2YsSUFBSSxDQUFDMUIsR0FBRyxHQUFHO1FBQ1gsSUFBSSxDQUFDRCxJQUFJLEdBQUcsSUFBSTRCLGtCQUFrQkQ7SUFDdEM7QUEyQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B0c3BhcnRpY2xlcy9zaGFwZS1pbWFnZS9icm93c2VyL0dpZlV0aWxzL0J5dGVTdHJlYW0uanM/OTlkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQnl0ZVN0cmVhbSB7XG4gICAgY29uc3RydWN0b3IoYnl0ZXMpIHtcbiAgICAgICAgdGhpcy5wb3MgPSAwO1xuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoYnl0ZXMpO1xuICAgIH1cbiAgICBnZXRTdHJpbmcoY291bnQpIHtcbiAgICAgICAgY29uc3Qgc2xpY2UgPSB0aGlzLmRhdGEuc2xpY2UodGhpcy5wb3MsIHRoaXMucG9zICsgY291bnQpO1xuICAgICAgICB0aGlzLnBvcyArPSBzbGljZS5sZW5ndGg7XG4gICAgICAgIHJldHVybiBzbGljZS5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgU3RyaW5nLmZyb21DaGFyQ29kZShjdXJyKSwgXCJcIik7XG4gICAgfVxuICAgIG5leHRCeXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhW3RoaXMucG9zKytdO1xuICAgIH1cbiAgICBuZXh0VHdvQnl0ZXMoKSB7XG4gICAgICAgIGNvbnN0IGluY3JlbWVudCA9IDIsIHByZXZpb3VzID0gMSwgc2hpZnQgPSA4O1xuICAgICAgICB0aGlzLnBvcyArPSBpbmNyZW1lbnQ7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFbdGhpcy5wb3MgLSBpbmNyZW1lbnRdICsgKHRoaXMuZGF0YVt0aGlzLnBvcyAtIHByZXZpb3VzXSA8PCBzaGlmdCk7XG4gICAgfVxuICAgIHJlYWRTdWJCbG9ja3MoKSB7XG4gICAgICAgIGxldCBibG9ja1N0cmluZyA9IFwiXCIsIHNpemUgPSAwO1xuICAgICAgICBjb25zdCBtaW5Db3VudCA9IDAsIGVtcHR5U2l6ZSA9IDA7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHNpemUgPSB0aGlzLmRhdGFbdGhpcy5wb3MrK107XG4gICAgICAgICAgICBmb3IgKGxldCBjb3VudCA9IHNpemU7IC0tY291bnQgPj0gbWluQ291bnQ7IGJsb2NrU3RyaW5nICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5kYXRhW3RoaXMucG9zKytdKSkge1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChzaXplICE9PSBlbXB0eVNpemUpO1xuICAgICAgICByZXR1cm4gYmxvY2tTdHJpbmc7XG4gICAgfVxuICAgIHJlYWRTdWJCbG9ja3NCaW4oKSB7XG4gICAgICAgIGxldCBzaXplID0gdGhpcy5kYXRhW3RoaXMucG9zXSwgbGVuID0gMDtcbiAgICAgICAgY29uc3QgZW1wdHlTaXplID0gMCwgaW5jcmVtZW50ID0gMTtcbiAgICAgICAgZm9yIChsZXQgb2Zmc2V0ID0gMDsgc2l6ZSAhPT0gZW1wdHlTaXplOyBvZmZzZXQgKz0gc2l6ZSArIGluY3JlbWVudCwgc2l6ZSA9IHRoaXMuZGF0YVt0aGlzLnBvcyArIG9mZnNldF0pIHtcbiAgICAgICAgICAgIGxlbiArPSBzaXplO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJsb2NrRGF0YSA9IG5ldyBVaW50OEFycmF5KGxlbik7XG4gICAgICAgIHNpemUgPSB0aGlzLmRhdGFbdGhpcy5wb3MrK107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBzaXplICE9PSBlbXB0eVNpemU7IHNpemUgPSB0aGlzLmRhdGFbdGhpcy5wb3MrK10pIHtcbiAgICAgICAgICAgIGZvciAobGV0IGNvdW50ID0gc2l6ZTsgLS1jb3VudCA+PSBlbXB0eVNpemU7IGJsb2NrRGF0YVtpKytdID0gdGhpcy5kYXRhW3RoaXMucG9zKytdKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJsb2NrRGF0YTtcbiAgICB9XG4gICAgc2tpcFN1YkJsb2NrcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBpbmNyZW1lbnQgPSAxLCBub0RhdGEgPSAwOyB0aGlzLmRhdGFbdGhpcy5wb3NdICE9PSBub0RhdGE7IHRoaXMucG9zICs9IHRoaXMuZGF0YVt0aGlzLnBvc10gKyBpbmNyZW1lbnQpIHtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBvcysrO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJCeXRlU3RyZWFtIiwiZ2V0U3RyaW5nIiwiY291bnQiLCJzbGljZSIsImRhdGEiLCJwb3MiLCJsZW5ndGgiLCJyZWR1Y2UiLCJhY2MiLCJjdXJyIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwibmV4dEJ5dGUiLCJuZXh0VHdvQnl0ZXMiLCJpbmNyZW1lbnQiLCJwcmV2aW91cyIsInNoaWZ0IiwicmVhZFN1YkJsb2NrcyIsImJsb2NrU3RyaW5nIiwic2l6ZSIsIm1pbkNvdW50IiwiZW1wdHlTaXplIiwicmVhZFN1YkJsb2Nrc0JpbiIsImxlbiIsIm9mZnNldCIsImJsb2NrRGF0YSIsIlVpbnQ4QXJyYXkiLCJpIiwic2tpcFN1YkJsb2NrcyIsIm5vRGF0YSIsImNvbnN0cnVjdG9yIiwiYnl0ZXMiLCJVaW50OENsYW1wZWRBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tsparticles/shape-image/browser/GifUtils/ByteStream.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tsparticles/shape-image/browser/GifUtils/Constants.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@tsparticles/shape-image/browser/GifUtils/Constants.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InterlaceOffsets: function() { return /* binding */ InterlaceOffsets; },\n/* harmony export */   InterlaceSteps: function() { return /* binding */ InterlaceSteps; }\n/* harmony export */ });\nconst InterlaceOffsets = [\n    0,\n    4,\n    2,\n    1\n];\nconst InterlaceSteps = [\n    8,\n    8,\n    4,\n    2\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdHNwYXJ0aWNsZXMvc2hhcGUtaW1hZ2UvYnJvd3Nlci9HaWZVdGlscy9Db25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxNQUFNQSxtQkFBbUI7SUFBQztJQUFHO0lBQUc7SUFBRztDQUFFLENBQUM7QUFDdEMsTUFBTUMsaUJBQWlCO0lBQUM7SUFBRztJQUFHO0lBQUc7Q0FBRSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9AdHNwYXJ0aWNsZXMvc2hhcGUtaW1hZ2UvYnJvd3Nlci9HaWZVdGlscy9Db25zdGFudHMuanM/ZGJkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgSW50ZXJsYWNlT2Zmc2V0cyA9IFswLCA0LCAyLCAxXTtcbmV4cG9ydCBjb25zdCBJbnRlcmxhY2VTdGVwcyA9IFs4LCA4LCA0LCAyXTtcbiJdLCJuYW1lcyI6WyJJbnRlcmxhY2VPZmZzZXRzIiwiSW50ZXJsYWNlU3RlcHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tsparticles/shape-image/browser/GifUtils/Constants.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@tsparticles/shape-image/browser/GifUtils/Utils.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@tsparticles/shape-image/browser/GifUtils/Utils.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeGIF: function() { return /* binding */ decodeGIF; },\n/* harmony export */   drawGif: function() { return /* binding */ drawGif; },\n/* harmony export */   getGIFLoopAmount: function() { return /* binding */ getGIFLoopAmount; },\n/* harmony export */   loadGifImage: function() { return /* binding */ loadGifImage; }\n/* harmony export */ });\n/* harmony import */ var _Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants.js */ \"(app-pages-browser)/./node_modules/@tsparticles/shape-image/browser/GifUtils/Constants.js\");\n/* harmony import */ var _ByteStream_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ByteStream.js */ \"(app-pages-browser)/./node_modules/@tsparticles/shape-image/browser/GifUtils/ByteStream.js\");\n\n\nconst origin = {\n    x: 0,\n    y: 0\n}, defaultFrame = 0, half = 0.5, initialTime = 0, firstIndex = 0, defaultLoopCount = 0;\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for(let i = 0; i < count; i++){\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2]\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nfunction parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch(byteStream.nextByte()){\n        case 249:\n            {\n                const frame = gif.frames[getFrameIndex(false)];\n                byteStream.pos++;\n                const packedByte = byteStream.nextByte();\n                frame.GCreserved = (packedByte & 0xe0) >>> 5;\n                frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n                frame.userInputDelayFlag = (packedByte & 2) === 2;\n                const transparencyFlag = (packedByte & 1) === 1;\n                frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n                const transparencyIndex = byteStream.nextByte();\n                if (transparencyFlag) {\n                    getTransparencyIndex(transparencyIndex);\n                }\n                byteStream.pos++;\n                break;\n            }\n        case 255:\n            {\n                byteStream.pos++;\n                const applicationExtension = {\n                    identifier: byteStream.getString(8),\n                    authenticationCode: byteStream.getString(3),\n                    data: byteStream.readSubBlocksBin()\n                };\n                gif.applicationExtensions.push(applicationExtension);\n                break;\n            }\n        case 254:\n            {\n                gif.comments.push([\n                    getFrameIndex(false),\n                    byteStream.readSubBlocks()\n                ]);\n                break;\n            }\n        case 1:\n            {\n                if (gif.globalColorTable.length === 0) {\n                    throw new EvalError(\"plain text extension without global color table\");\n                }\n                byteStream.pos++;\n                gif.frames[getFrameIndex(false)].plainTextData = {\n                    left: byteStream.nextTwoBytes(),\n                    top: byteStream.nextTwoBytes(),\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                    charSize: {\n                        width: byteStream.nextTwoBytes(),\n                        height: byteStream.nextTwoBytes()\n                    },\n                    foregroundColor: byteStream.nextByte(),\n                    backgroundColor: byteStream.nextByte(),\n                    text: byteStream.readSubBlocks()\n                };\n                break;\n            }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << (packedByte & 7) + 1;\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index)=>{\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        if (index !== getTransparencyIndex(null)) {\n            return {\n                r,\n                g,\n                b,\n                a: 255\n            };\n        }\n        return {\n            r,\n            g,\n            b,\n            a: avgAlpha ? ~~((r + g + b) / 3) : 0\n        };\n    };\n    const image = (()=>{\n        try {\n            return new ImageData(frame.width, frame.height, {\n                colorSpace: \"srgb\"\n            });\n        } catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len)=>{\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16) & (1 << len) - 1 << bitPos) >>> bitPos;\n    };\n    if (interlacedFlag) {\n        for(let code = 0, size = minCodeSize + 1, pos = 0, dic = [\n            [\n                0\n            ]\n        ], pass = 0; pass < 4; pass++){\n            if (_Constants_js__WEBPACK_IMPORTED_MODULE_0__.InterlaceOffsets[pass] < frame.height) {\n                let pixelPos = 0, lineIndex = 0, exit = false;\n                while(!exit){\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for(let i = 0; i < dic.length; i++){\n                            dic[i] = i < clearCode ? [\n                                i\n                            ] : [];\n                        }\n                    } else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        } else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for (const item of dic[code]){\n                            const { r, g, b, a } = getColor(item);\n                            image.data.set([\n                                r,\n                                g,\n                                b,\n                                a\n                            ], _Constants_js__WEBPACK_IMPORTED_MODULE_0__.InterlaceOffsets[pass] * frame.width + _Constants_js__WEBPACK_IMPORTED_MODULE_0__.InterlaceSteps[pass] * lineIndex + pixelPos % (frame.width * 4));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (_Constants_js__WEBPACK_IMPORTED_MODULE_0__.InterlaceOffsets[pass] + _Constants_js__WEBPACK_IMPORTED_MODULE_0__.InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            exit = true;\n                        }\n                    }\n                }\n            }\n            progressCallback === null || progressCallback === void 0 ? void 0 : progressCallback(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, {\n                x: frame.left,\n                y: frame.top\n            }, {\n                width: gif.width,\n                height: gif.height\n            });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    } else {\n        let code = 0, size = minCodeSize + 1, pos = 0, pixelPos = -4, exit = false;\n        const dic = [\n            [\n                0\n            ]\n        ];\n        while(!exit){\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for(let i = 0; i < dic.length; i++){\n                    dic[i] = i < clearCode ? [\n                        i\n                    ] : [];\n                }\n            } else {\n                if (code === clearCode + 1) {\n                    exit = true;\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                } else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for (const item of dic[code]){\n                    const { r, g, b, a } = getColor(item);\n                    image.data.set([\n                        r,\n                        g,\n                        b,\n                        a\n                    ], pixelPos += 4);\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback === null || progressCallback === void 0 ? void 0 : progressCallback((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, {\n            x: frame.left,\n            y: frame.top\n        }, {\n            width: gif.width,\n            height: gif.height\n        });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch(byteStream.nextByte()){\n        case 59:\n            return true;\n        case 44:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case 33:\n            parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nfunction getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions){\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nasync function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha) avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, {\n            colorSpace: \"srgb\"\n        }),\n        comments: [],\n        applicationExtensions: []\n    }, byteStream = new _ByteStream_js__WEBPACK_IMPORTED_MODULE_1__.ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << (packedByte & 7) + 1, backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (()=>{\n        try {\n            return new ImageData(gif.width, gif.height, {\n                colorSpace: \"srgb\"\n            });\n        } catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [\n        r,\n        g,\n        b,\n        255\n    ] : [\n        0,\n        0,\n        0,\n        0\n    ]);\n    for(let i = 4; i < backgroundImage.data.length; i *= 2){\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment)=>{\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue)=>{\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: 0,\n                    image: new ImageData(1, 1, {\n                        colorSpace: \"srgb\"\n                    }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        }while (!await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback));\n        gif.frames.length--;\n        for (const frame of gif.frames){\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    } catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(\"error while parsing frame \".concat(frameIndex, ' \"').concat(error.message, '\"'));\n        }\n        throw error;\n    }\n}\nfunction drawGif(data) {\n    const { context, radius, particle, delta } = data, image = particle.image;\n    if (!(image === null || image === void 0 ? void 0 : image.gifData) || !image.gif) {\n        return;\n    }\n    const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n    if (!offscreenContext) {\n        throw new Error(\"could not create offscreen canvas context\");\n    }\n    offscreenContext.imageSmoothingQuality = \"low\";\n    offscreenContext.imageSmoothingEnabled = false;\n    offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n    if (particle.gifLoopCount === undefined) {\n        var _image_gifLoopCount;\n        particle.gifLoopCount = (_image_gifLoopCount = image.gifLoopCount) !== null && _image_gifLoopCount !== void 0 ? _image_gifLoopCount : defaultLoopCount;\n    }\n    var _particle_gifFrame;\n    let frameIndex = (_particle_gifFrame = particle.gifFrame) !== null && _particle_gifFrame !== void 0 ? _particle_gifFrame : defaultFrame;\n    const pos = {\n        x: -image.gifData.width * half,\n        y: -image.gifData.height * half\n    }, frame = image.gifData.frames[frameIndex];\n    if (particle.gifTime === undefined) {\n        particle.gifTime = initialTime;\n    }\n    if (!frame.bitmap) {\n        return;\n    }\n    context.scale(radius / image.gifData.width, radius / image.gifData.height);\n    switch(frame.disposalMethod){\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 0:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n            break;\n        case 1:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            break;\n        case 2:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n            if (!image.gifData.globalColorTable.length) {\n                offscreenContext.putImageData(image.gifData.frames[firstIndex].image, pos.x + frame.left, pos.y + frame.top);\n            } else {\n                offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n            }\n            break;\n        case 3:\n            {\n                const previousImageData = offscreenContext.getImageData(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n                offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                context.drawImage(offscreenCanvas, pos.x, pos.y);\n                offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n                offscreenContext.putImageData(previousImageData, origin.x, origin.y);\n            }\n            break;\n    }\n    particle.gifTime += delta.value;\n    if (particle.gifTime > frame.delayTime) {\n        particle.gifTime -= frame.delayTime;\n        if (++frameIndex >= image.gifData.frames.length) {\n            if (--particle.gifLoopCount <= defaultLoopCount) {\n                return;\n            }\n            frameIndex = firstIndex;\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n        }\n        particle.gifFrame = frameIndex;\n    }\n    context.scale(image.gifData.width / radius, image.gifData.height / radius);\n}\nasync function loadGifImage(image) {\n    if (image.type !== \"gif\") {\n        const { loadImage } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../Utils.js */ \"(app-pages-browser)/./node_modules/@tsparticles/shape-image/browser/Utils.js\"));\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await decodeGIF(image.source);\n        var _getGIFLoopAmount;\n        image.gifLoopCount = (_getGIFLoopAmount = getGIFLoopAmount(image.gifData)) !== null && _getGIFLoopAmount !== void 0 ? _getGIFLoopAmount : defaultLoopCount;\n        if (!image.gifLoopCount) {\n            image.gifLoopCount = Infinity;\n        }\n    } catch (e) {\n        image.error = true;\n    }\n    image.loading = false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@tsparticles/shape-image/browser/GifUtils/Utils.js\n"));

/***/ })

}]);